name: "Sync Database"

on:
  workflow_call:
    inputs:
      app_url:
        type: string
        description: Application url
      app_key:
        type: string
        description: Application key
      notify_teams:
        type: string
        description: The teams url
      from:
        type: string
        description: The from DB
      to:
        type: string
        description: The target DB
      notify_slack_webhook:
        type: string
        description: The slack webhook
      notify_slack_channel:
        type: string
        description: The slack channel
        
    secrets:
      KUBECONFIG:
        required: true

jobs:
  debug: 
    runs-on: [self-hosted, k8s]
    steps:
      - name: "Show Parameters used" 
        run: |
          echo "app_url = ${{ inputs.app_url }}"
          echo "app_key = ${{ inputs.app_key }}"
          echo "from = ${{ inputs.from }}"
          echo "to = ${{ inputs.to }}"
          echo "notify_teams = ${{ inputs.notify_teams }}"

  dump-from:
    runs-on: [self-hosted, k8s]
    environment: 
      name: ${{ inputs.from }}
    steps:
      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - name: Kill existing finished job
        continue-on-error: true
        run: |
          kubectl -n ${{ inputs.app_key }}-${{ inputs.from }} delete job ${{ inputs.app_key }}-dbdump

      - name: Database Dump ${{ inputs.from }}
        run: |
          kubectl create job --from=cronjob.batch/${{ inputs.app_key }}-dbdump -n ${{ inputs.app_key }}-${{ inputs.from }} ${{ inputs.app_key }}-dbdump

  dump-to:
    runs-on: [self-hosted, k8s]
    environment: 
      name: ${{ inputs.to }}
    steps:
      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - name: Kill existing finished job
        continue-on-error: true
        run: |
          kubectl -n ${{ inputs.app_key }}-${{ inputs.to }} delete job ${{ inputs.app_key }}-dbdump

      - name: Database Dump ${{ inputs.to }}
        run: |
          kubectl create job --from=cronjob.batch/${{ inputs.app_key }}-dbdump -n ${{ inputs.app_key }}-${{ inputs.to }} ${{ inputs.app_key }}-dbdump

  take-from:
    concurrency: 
      group: ${{ github.ref }}-db
      cancel-in-progress: false
    #needs: [validation]
    needs: [dump-from, dump-to]
    runs-on: [self-hosted, k8s]
    environment: 
      name: ${{ inputs.from }}

    steps:
      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - name: show current folder
        run: |
          pwd

      # EXPORT SOURCE DATA TO FILE
      - name: EXPORT ${{ inputs.from }} DB
        run: |
          kubectl exec -n ${{ inputs.app_key }}-${{inputs.from}} -it deploy/${{ inputs.app_key }}-drush-pod -- /bin/bash -c "export TEMP=/var/tmp;/var/www/drupal/vendor/bin/drush sql-dump --gzip --result-file=/tmp/db-${{ github.run_id }}.sql"

      - name: Get Drush Pod name
        run: | 
          echo "POD_NAME=$(kubectl get pods -n ${{ inputs.app_key }}-${{ inputs.from }} --selector=app=${{ inputs.app_key }}-drush-pod -o jsonpath='{.items[*].metadata.name}')" >> $GITHUB_ENV;

      # COPY FILE TO WORKSPACE
      - name: COPY DATABASE FILE FROM ${{ inputs.from }} TO WORKSPACE
        run: |
         kubectl cp -n ${{ inputs.app_key }}-${{inputs.from}} ${{ inputs.app_key }}-${{inputs.from}}/$POD_NAME:/tmp/db-${{ github.run_id }}.sql.gz ${{ github.workspace }}/db-${{ github.run_id }}.sql.gz

      # Archive dump
      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: db-${{ github.run_id }}.sql.gz
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/db-${{ github.run_id }}.sql.gz

  put-to:
    concurrency: 
      group: ${{ github.ref }}-db
      cancel-in-progress: false
    needs: [take-from]
    runs-on: [self-hosted, k8s]
    environment: 
      name: ${{ inputs.to }}

    steps:
      
      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - name: SHOW CONTEXTS
        run: |
         kubectl config get-contexts

      # Fetch Dump from artifact storage
      - uses: actions/download-artifact@v3
        with:
          name: db-${{ github.run_id }}.sql.gz

      - name: Get Drush Pod name
        run: | 
          echo "POD_NAME=$(kubectl get pods -n ${{ inputs.app_key }}-${{inputs.to}} --selector=app=${{ inputs.app_key }}-drush-pod -o jsonpath='{.items[*].metadata.name}')" >> $GITHUB_ENV;

      # COPY FILE TO DEST POD    
      - name: COPY DATABASE FILE FROM WORKSPACE TO ${{ inputs.to }}
        run: |
         kubectl cp -n ${{ inputs.app_key }}-${{inputs.to}} ${{ github.workspace }}/db-${{ github.run_id }}.sql.gz ${{ inputs.app_key }}-${{inputs.to}}/$POD_NAME:/tmp/db-${{ github.run_id }}.sql.gz

      # Drop DESTINATION tables
      - name: DROP ${{ inputs.to }} TABLES 
        run: |
          kubectl exec -n ${{ inputs.app_key }}-${{inputs.to}} -it deploy/${{ inputs.app_key }}-drush-pod -- /bin/bash -c "export TEMP=/var/tmp;/var/www/drupal/vendor/bin/drush sql-drop -vvv"

      # UNZIP
      - name: UNZIP gz
        run: |
          kubectl exec -n ${{ inputs.app_key }}-${{inputs.to}} -it deploy/${{ inputs.app_key }}-drush-pod -- /bin/bash -c "export TEMP=/var/tmp;gunzip /tmp/db-${{ github.run_id }}.sql"

      # UPLOAD DATA ON DESTINATION
      - name: IMPORT from file 
        run: |
          kubectl exec -n ${{ inputs.app_key }}-${{inputs.to}} -it deploy/${{ inputs.app_key }}-drush-pod -- /bin/bash -c "export TEMP=/var/tmp;/var/www/drupal/vendor/bin/drush sqlc < /tmp/db-${{ github.run_id }}.sql"

      # DELETE DESTINATION export FILE
      - name: delete transfer file ${{ inputs.from }}
        run: |
          kubectl exec -n ${{ inputs.app_key }}-${{inputs.to}} -it deploy/${{ inputs.app_key }}-drush-pod -- /bin/bash -c "rm /tmp/db-${{ github.run_id }}.sql"

  cleanup-source:
    needs: [put-to]
    runs-on: [self-hosted, k8s]
    environment: 
      name: ${{ inputs.from }}

    steps:

      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      # DELETE SOURCE export FILE
      - name: delete transfer file ${{ inputs.to }}
        run: |
          kubectl exec -n ${{ inputs.app_key }}-${{inputs.from}} -it deploy/${{ inputs.app_key }}-drush-pod -- /bin/bash -c "rm /tmp/db-${{ github.run_id }}.sql.gz"
      
  cleanup:
    needs: [cleanup-source]
    runs-on: [self-hosted, k8s]
    steps: 

      # Delete artifact
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
              db-${{ github.run_id }}.sql.gz

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ inputs.notify_slack_webhook }}
          SLACK_CHANNEL: ${{ inputs.notify_slack_channel }}
          SLACK_USERNAME: Github Actions
          SLACK_MSG_AUTHOR: ${{ github.actor }}
          SLACK_ICON_EMOJI: ":large_green_circle:"
          SLACK_COLOR: ${{ job.status }}
          SLACK_FOOTER: "OUTPUT: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SLACK_TITLE: "ðŸ—„ [${{ github.event.repository.name }}] Sync job done"

      - name: Inform via teams succeeded
        uses: FTsbrown/msteams-action@master
        with: 
          TITLE: "[${{ github.event.repository.name }}] Sync job done"
          BODY: SYnc  ${{ github.event.inputs.thecommand }} from ${{ inputs.from }} to ${{ inputs.to }} ended
          MS_TEAMS_WEBHOOK: ${{ inputs.notify_teams }}

      - uses: AutoModality/action-clean@v1
