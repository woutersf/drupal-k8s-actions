name: "Code Sniffer"

on:
  workflow_call:
    inputs:
      app_url:
        type: string
        description: Application url
      app_key:
        type: string
        description: Application key
      aks_branch:
        type: string
        description: AKS branch
    secrets:
      KUBECONFIG:
        required: true
      GIT_CHECKOUT_TOKEN:
        required: true
jobs:
  debug: 
    runs-on: [self-hosted, k8s]
    steps:
      - name: "Show Parameters used" 
        run: |
          echo "app_url = ${{ inputs.app_url }}"
          echo "app_key = ${{ inputs.app_key }}"
          echo "aks_branch = ${{ inputs.aks_branch }}"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: LINT Custom folder
        uses: StephaneBour/actions-php-lint@8.1
        with:
          dir: './docroot/modules/custom'
          
  phpcs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Install locked dependencies"
        run: "cd dev-tools && composer install --no-interaction --no-progress --no-suggest"

      - name: Check coding standards custom
        run: dev-tools/vendor/bin/phing php-coding-standards

  check-infra-code:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: false
    runs-on: [self-hosted, k8s]
    environment: 
      name: tst
      url: ${{ inputs.app_url }}
    steps:

      - uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: actions/checkout@v3

      ## PREP  HELM CODE
      - name: Checkout helm repo (branch ${{ inputs.aks_branch }})
        uses: actions/checkout@v3
        with:
          repository: woutersf/drupal-helm-charts-k8s
          path: upstream_helm
          token: ${{ secrets.GIT_CHECKOUT_TOKEN }}
          ref: '${{ inputs.aks_branch }}'

      - name: Mv infra from repo to helm folder
        run: |
          echo "Copy from upstream HELM into helm folder.";
          cp -n -v upstream_helm/templates/* helm/templates;
          rm -rf helm/etc/drupal/*.gz
      ## END HELM INFRA CODE PULL IN

      # Validate helm stuff to not leave a broken state.
      - name: Dry run helm config
        run: |
          cd helm
          helm upgrade --dry-run --timeout 2m --install -n ${{ inputs.app_key }}-tst -f values-tst.yaml --set deploy.runid=${{ github.run_id }} --set image.tag=${{ steps.container-tag.outputs.value }}  --set image.version=latest  ${{ inputs.app_key }} .

      - uses: colpal/actions-clean@v1
        continue-on-error: true
        if: ${{ always() }}

  # sonarqube:
  #   name: SonarQube
  #   runs-on: [self-hosted, k8s]
  #   steps:
  #   - name: Checking out
  #     uses: actions/checkout@v3
  #     with:
  #       # Disabling shallow clone is recommended for improving relevancy of reporting
  #       fetch-depth: 0

    # - name: Cache Composer dependencies
    #   uses: actions/cache@v3
    #   with:
    #     path: /tmp/composer-cache
    #     key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
              
    # - uses: php-actions/composer@v6
    #   if: steps.check_files.outputs.files_exists == 'true'
    #   env:
    #     COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ secrets.GIT_CHECKOUT_TOKEN }}"} }'

    # - name: PHPUnit tests
    #   if: steps.check_files.outputs.files_exists == 'true'
    #   uses: php-actions/phpunit@v9
    #   with:
    #     php_extensions: "xdebug"
    #     configuration: phpunit.xml
    #     coverage_clover: "coverage.xml"
    #   env:
    #     XDEBUG_MODE: coverage
    #     TEST_NAME: Scarlett
    #     memory_limit: 256M

#     - name: Fix code coverage paths
#       run: sed -i 
# 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage.xml

#     - name: Cache SonarCloud packages
#       uses: actions/cache@v3
#       with:
#         path: ~/.sonar/cache
#         key: ${{ runner.os }}-sonar
#         restore-keys: ${{ runner.os }}-sonar

#     - name: SonarCloud Scan
#       uses: sonarsource/sonarcloud-github-action@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       with:
#         args: >
#           -Dsonar.verbose=true          
